/*
 * Skyclient Universal Installer - Skyclient installer but written in java!
 * Copyright (C) koxx12-dev [2021 - 2022]
 *
 * This program comes with ABSOLUTELY NO WARRANTY
 * This is free software, and you are welcome to redistribute it
 * under the certain conditions that can be found here
 * https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * If you have any questions or concerns, please create
 * an issue on the github page that can be found under this url
 * https://github.com/koxx12-dev/Skyclient-installer-Java
 *
 * If you have a private concern, please contact me on
 * Discord: Koxx12#8061
 *
 */

package io.github.koxx12dev.universal.guis;

import io.github.koxx12dev.universal.SkyclientUniversal;
import io.github.koxx12dev.universal.utils.Num;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class Loading {
    private JProgressBar progressBar1;
    private JLabel Text;
    private JPanel pane;
    private int maxSteps;
    private int currentStep = 0;
    private JFrame frame;

    public Loading(String title, String stepNullLabel, int maxSteps) {
        new Thread(() -> {
            this.maxSteps = maxSteps;
            Text.setText(stepNullLabel);
            frame = new JFrame(title);
            frame.setContentPane(pane);
            frame.setResizable(false);
            frame.setIconImage(SkyclientUniversal.skyclientIcon);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
        }).start();
    }

    public void setStep(String name, int step) {
        // do this asynchronously
        SwingUtilities.invokeLater(() -> {

            System.out.println("Loading: " + name + " | " + step + " / " + maxSteps);

            if (!(step > maxSteps)) {

                int lastStep = (int) ((currentStep * 100.0) / maxSteps);
                int currStep = (int) ((step * 100.0) / maxSteps);
                List<Integer> between = Num.getBetween(lastStep, currStep);

                currentStep = step;

                for (int i : between) {
                    progressBar1.setValue(i);
                    try {
                        Thread.sleep(30);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                Text.setText(name);

            } else {
                throw new StackOverflowError("Exceeded the max amount of loading steps");
            }
        });
    }

    public void nextStep(String name) throws InterruptedException {
        setStep(name, currentStep + 1);
    }

    public void pop() {
        frame.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        pane = new JPanel();
        pane.setLayout(new GridBagLayout());
        pane.setMinimumSize(new Dimension(314, 56));
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        pane.add(spacer1, gbc);
        Text = new JLabel();
        Text.setHorizontalAlignment(0);
        Text.setPreferredSize(new Dimension(280, 16));
        Text.setText("Label");
        Text.setVerticalTextPosition(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.SOUTH;
        pane.add(Text, gbc);
        progressBar1 = new JProgressBar();
        progressBar1.setBorderPainted(true);
        progressBar1.setIndeterminate(false);
        progressBar1.setName("");
        progressBar1.setPreferredSize(new Dimension(300, 20));
        progressBar1.setStringPainted(true);
        progressBar1.setToolTipText("");
        progressBar1.setValue(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 0, 10, 0);
        pane.add(progressBar1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        pane.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        pane.add(spacer3, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return pane;
    }

}
